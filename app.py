# -*- coding: utf-8 -*-
"""newapp.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1D_SVhXGpyUoqqhRs_SFWQQpD5Qd5CDrK
"""

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from datetime import datetime
import os

# Configure page
st.set_page_config(
    page_title="Election Threat Monitor",
    page_icon="üåç",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Session state initialization
if 'processed' not in st.session_state:
    st.session_state.processed = False
if 'reports' not in st.session_state:
    st.session_state.reports = {}

# Main app
def main():
    st.title("üáßüá´ Burkina Faso Election Threat Intelligence Dashboard")
    st.markdown("### Real-time Narrative Monitoring & FIMI Detection")

    # File upload for preprocessed data
    preprocessed_file = st.file_uploader(
        "Upload Preprocessed Data (CSV)",
        type=["csv"],
        help="Upload preprocessed data containing 'Cluster ID', 'Report Summary', 'All URLs', and 'Categorization'."
    )

    if preprocessed_file:
        # Load preprocessed data
        @st.cache_data
        def load_preprocessed_data(file):
            try:
                df = pd.read_csv(file)
                return df
            except Exception as e:
                st.error(f"‚ùå Failed to load preprocessed data: {e}")
                return None

        preprocessed_data = load_preprocessed_data(preprocessed_file)

        if preprocessed_data is not None:
            # Validate required columns
            required_columns = {'Cluster ID', 'Report Summary', 'All URLs', 'Categorization'}
            if not required_columns.issubset(preprocessed_data.columns):
                st.error(f"‚ùå The uploaded file is missing required columns. Found: {list(preprocessed_data.columns)}")
                return

            # Populate session state with preprocessed data
            st.session_state.processed = True
            st.session_state.preprocessed_data = preprocessed_data
            st.success("‚úÖ Preprocessed data loaded successfully!")

    # Display Results
    if st.session_state.processed:
        preprocessed_data = st.session_state.preprocessed_data

        # Create tabs
        tab1, tab2, tab3 = st.tabs([
            "üìä Cluster Analytics",
            "üìú Threat Reports",
            "üö® Threat Categorization"
        ])

        with tab1:
            st.markdown("### Cluster Overview")
            st.dataframe(preprocessed_data)

        with tab2:
            st.markdown("### Detailed Threat Reports")
            cluster_selector = st.selectbox(
                "Select Cluster for Detailed Analysis",
                options=preprocessed_data['Cluster ID'].unique(),
                format_func=lambda x: f"Cluster {x}"
            )

            # Filter data for the selected cluster
            cluster_data = preprocessed_data[preprocessed_data['Cluster ID'] == cluster_selector]

            # Display report summary
            st.markdown(f"#### Report Summary for Cluster {cluster_selector}")
            st.info(cluster_data['Report Summary'].values[0])

            # Display associated URLs
            st.markdown("### Associated URLs")
            urls = cluster_data['All URLs'].values[0].split(",")  # Assuming URLs are comma-separated
            for url in urls:
                st.markdown(f"- [{url.strip()}]({url.strip()})")

        with tab3:
            st.markdown("### Threat Tier Classification")
            st.markdown("#### Categorization by Cluster")
            categorization_df = preprocessed_data[['Cluster ID', 'Categorization']]
            st.dataframe(categorization_df)

            # Add download button
            st.download_button(
                label="üì• Download Full Report",
                data=convert_df(preprocessed_data),
                file_name=f"threat_report_{datetime.now().date()}.csv",
                mime="text/csv"
            )

    def convert_df(df):
        return df.to_csv(index=False).encode('utf-8')

# Call the main function
if __name__ == "__main__":
    main()
