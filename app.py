# -*- coding: utf-8 -*-
"""newapp.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1D_SVhXGpyUoqqhRs_SFWQQpD5Qd5CDrK
"""

import streamlit as st
import pandas as pd
from datetime import datetime
import requests
from io import StringIO

# Configure page
st.set_page_config(
    page_title="Burkina Faso Election Threat Intelligence Dashboard",
    page_icon="üåç",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Session state initialization
if 'data_loaded' not in st.session_state:
    st.session_state.data_loaded = False

# Function to fetch data from GitHub
@st.cache_data
def fetch_data_from_github(url):
    try:
        response = requests.get(url)
        if response.status_code == 200:
            return response.text  # Return raw content of the file
        else:
            st.error(f"‚ùå Failed to fetch data from GitHub. Status code: {response.status_code}")
            return None
    except Exception as e:
        st.error(f"‚ùå An error occurred while fetching data: {e}")
        return None

# Function to load CSV data with error handling
def load_csv_data(raw_data):
    try:
        df = pd.read_csv(StringIO(raw_data), on_bad_lines='skip')  # Skip problematic rows
        expected_columns = {'Cluster ID', 'Report Summary', 'All URLs', 'Categorization'}
        if not expected_columns.issubset(df.columns):
            st.error(f"‚ùå The uploaded file is missing required columns. Found: {list(df.columns)}")
            return None
        return df
    except Exception as e:
        st.error(f"‚ùå Failed to parse CSV data: {e}")
        return None

# Main app
def main():
    st.title("üáßüá´ Burkina Faso Election Threat Intelligence Dashboard")
    st.markdown("### Real-time Narrative Monitoring & FIMI Detection")

    # Fetch processed data from GitHub
    if not st.session_state.data_loaded:
        github_csv_url = "https://github.com/hanna-tes/RadarSystem/blob/main/Burkina_Faso_intelligence_reportMarch31.csv"
        st.write("Fetching Burkina Faso intelligence report...")
        raw_data = fetch_data_from_github(github_csv_url)
        if raw_data:
            preprocessed_data = load_csv_data(raw_data)
            if preprocessed_data is not None:
                st.session_state.preprocessed_data = preprocessed_data
                st.session_state.data_loaded = True
                st.success("‚úÖ Burkina Faso intelligence report loaded.")

    # Display results
    if st.session_state.data_loaded:
        preprocessed_data = st.session_state.preprocessed_data

        # Create tabs
        tab1, tab2, tab3 = st.tabs([
            "üìä Cluster Analytics",
            "üìú Threat Reports",
            "üö® Threat Categorization"
        ])

        with tab1:
            st.markdown("### Narrative Growth vs Momentum Intensity")
            # Fetch and display the visualization image
            heatmap_url = "https://github.com/hanna-tes/RadarSystem/blob/main/trend_visualization.png"
            st.image(heatmap_url, caption="Narrative Growth vs Momentum Intensity", use_column_width=True)

            # Display cluster overview
            st.markdown("### Cluster Overview")
            st.dataframe(preprocessed_data)

        with tab2:
            st.markdown("### Detailed Threat Reports")
            cluster_selector = st.selectbox(
                "Select Cluster for Detailed Analysis",
                options=preprocessed_data['Cluster ID'].unique(),
                format_func=lambda x: f"Cluster {x}"
            )

            # Filter data for the selected cluster
            cluster_data = preprocessed_data[preprocessed_data['Cluster ID'] == cluster_selector]

            # Display report summary
            st.markdown(f"#### Report Summary for Cluster {cluster_selector}")
            st.info(cluster_data['Report Summary'].values[0])

            # Display associated URLs
            st.markdown("### Associated URLs")
            urls = cluster_data['All URLs'].values[0].split("\n")  # Assuming URLs are newline-separated
            for url in urls:
                st.markdown(f"- [{url.strip()}]({url.strip()})")

        with tab3:
            st.markdown("### Threat Tier Classification")
            categorization_df = preprocessed_data[['Cluster ID', 'Categorization']]
            st.dataframe(categorization_df)

            # Add download button
            st.download_button(
                label="üì• Download Full Report",
                data=convert_df(preprocessed_data),
                file_name=f"threat_report_{datetime.now().date()}.csv",
                mime="text/csv"
            )

# Function to convert DataFrame to CSV for download
def convert_df(df):
    return df.to_csv(index=False).encode('utf-8')

# Call the main function
if __name__ == "__main__":
    main()
