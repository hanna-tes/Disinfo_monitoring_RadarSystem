# -*- coding: utf-8 -*-
"""newapp.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1D_SVhXGpyUoqqhRs_SFWQQpD5Qd5CDrK
"""

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from datetime import datetime
import os

# Configure page
st.set_page_config(
    page_title="Burkina Faso Election Threat Intelligence Dashboard",
    page_icon="🌍",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Session state initialization
if 'data_loaded' not in st.session_state:
    st.session_state.data_loaded = False

# Function to fetch data from GitHub
def fetch_data_from_github(url):
    try:
        response = requests.get(url)
        if response.status_code == 200:
            return response.text  # Return raw content of the file
        else:
            st.error(f"❌ Failed to fetch data from GitHub. Status code: {response.status_code}")
            return None
    except Exception as e:
        st.error(f"❌ An error occurred while fetching data: {e}")
        return None

# Main app
def main():
    st.title("🇧🇫 Burkina Faso Election Threat Intelligence Dashboard")
    st.markdown("### Real-time Narrative Monitoring & FIMI Detection")

    # Fetch processed data from GitHub
    if not st.session_state.data_loaded:
        github_csv_url = "https://github.com/hanna-tes/RadarSystem/blob/main/Burkina_Faso_intelligence_reportMarch31.csv"
        st.write("Fetching Burkina Faso intelligence report...")
        raw_data = fetch_data_from_github(github_csv_url)
        if raw_data:
            preprocessed_data = pd.read_csv(StringIO(raw_data))
            if preprocessed_data is not None:
                st.session_state.preprocessed_data = preprocessed_data
                st.session_state.data_loaded = True
                st.success("✅ Burkina Faso intelligence report loaded.")

    # Display results
    if st.session_state.data_loaded:
        preprocessed_data = st.session_state.preprocessed_data

        # Create tabs
        tab1, tab2, tab3 = st.tabs([
            "📊 Cluster Analytics",
            "📜 Threat Reports",
            "🚨 Threat Categorization"
        ])

        with tab1:
            st.markdown("### Narrative Growth vs Momentum Intensity")
            heatmap_url = "https://github.com/hanna-tes/RadarSystem/blob/main/trend_visualization.png"
            st.image(heatmap_url, caption="Narrative Growth vs Momentum Intensity", use_column_width=True)

            # Add any additional content for Cluster Analytics here

        with tab2:
            st.markdown("### Burkina Faso Intelligence Report")
            st.dataframe(preprocessed_data)

            # Add download button
            st.download_button(
                label="📥 Download Full Report",
                data=convert_df(preprocessed_data),
                file_name=f"threat_report_{datetime.now().date()}.csv",
                mime="text/csv"
            )

        with tab3:
            st.markdown("### Threat Tier Classification")
            # Add content for Threat Categorization here (e.g., categorization metrics or visualizations)

# Function to convert DataFrame to CSV for download
def convert_df(df):
    return df.to_csv(index=False).encode('utf-8')

# Call the main function
if __name__ == "__main__":
    main()
